/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import controller.AcolhimentoController;
import controller.Log;
import exceptions.CampoEmBrancoException;
import java.awt.Component;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author LuizFritsch
 */
public class Acolhimento extends javax.swing.JDialog {

    private Log log;
    private AcolhimentoController ac;
    ArrayList<JPanel> listaDePanel;

    /**
     * Creates new form Acolhimento
     */
    public Acolhimento(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        log = new Log();
        ac = new AcolhimentoController();
        listaDePanel = new ArrayList<>();
        listaDePanel.add(panelInformacoesPaciente);
        listaDePanel.add(panelOrigemEncaminhamento);
        listaDePanel.add(panelInformacoesAgravo);
        listaDePanel.add(panelInformacoesProfissionaisPaciente);
        MaskFormatter maskData;
        //  Mascara no campo data.
        //  Como o salvar não pega JFormattedTextField, por preguiça de criar um 
        //metodo novo, fiz esta pequena gambiarra ao inicializar o textfield 
        //como JformatedTextField e setar a mascara dele aqui.
        try {
            maskData = new MaskFormatter("##/##/####");
            maskData.install((JFormattedTextField) campoDataNascimento);
        } catch (ParseException erro) {
            log.EscreveNoLog("Erro: " + erro.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelInformacoesPaciente = new javax.swing.JPanel();
        labelTituloInformacoesPaciente = new javax.swing.JLabel();
        labelSUS = new javax.swing.JLabel();
        campoSUS = new javax.swing.JTextField();
        labelNomePaciente = new javax.swing.JLabel();
        campoNomePaciente = new javax.swing.JTextField();
        labelSexo = new javax.swing.JLabel();
        campoSexo = new javax.swing.JComboBox<>();
        labelDataNascimento = new javax.swing.JLabel();
        campoDataNascimento = new javax.swing.JFormattedTextField();
        labelNaturalidade = new javax.swing.JLabel();
        campoNaturalidade = new javax.swing.JTextField();
        labelNomeMae = new javax.swing.JLabel();
        campoNomeMae = new javax.swing.JTextField();
        labelEndereco = new javax.swing.JLabel();
        campoEndereco = new javax.swing.JTextField();
        labelCelular = new javax.swing.JLabel();
        campoCelular = new javax.swing.JTextField();
        labelEscolaridade = new javax.swing.JLabel();
        campoEscolaridade = new javax.swing.JComboBox<>();
        botaoLimparInformacoesPaciente = new javax.swing.JButton();
        labelCPF = new javax.swing.JLabel();
        campoCPF = new javax.swing.JTextField();
        campoNumeroCasa = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        panelOrigemEncaminhamento = new javax.swing.JPanel();
        labelOrigemEncaminhamento = new javax.swing.JLabel();
        checkINSS = new javax.swing.JCheckBox();
        checkSUS = new javax.swing.JCheckBox();
        checkEmpresa = new javax.swing.JCheckBox();
        checkSindicato = new javax.swing.JCheckBox();
        checkMunicipio = new javax.swing.JCheckBox();
        checkSem = new javax.swing.JCheckBox();
        checkServMedicoPart = new javax.swing.JCheckBox();
        checkUnidade = new javax.swing.JCheckBox();
        checkOutro = new javax.swing.JCheckBox();
        campoMunicipioUnidadeOUOutro = new javax.swing.JTextField();
        botaoLimparOrigemEncaminhamento = new javax.swing.JButton();
        panelInformacoesProfissionaisPaciente = new javax.swing.JPanel();
        labelTituloInformacoesProfissionaisPaciente = new javax.swing.JLabel();
        labelProfisssao = new javax.swing.JLabel();
        labelCBO = new javax.swing.JLabel();
        campoCBO = new javax.swing.JTextField();
        labelEmpresa = new javax.swing.JLabel();
        campoEmpresa = new javax.swing.JTextField();
        labelRelacaoTrabalho = new javax.swing.JLabel();
        campoRelacaoTrabalho = new javax.swing.JComboBox<>();
        campoMercadoInformal = new javax.swing.JTextField();
        labelSituacaoTrabalho = new javax.swing.JLabel();
        campoSituacaoTrabalho = new javax.swing.JComboBox<>();
        labelCarteiraTrabalho = new javax.swing.JLabel();
        campoCarteiraTrabalho = new javax.swing.JComboBox<>();
        labelObjetivoConsulta = new javax.swing.JLabel();
        campoObjetivoConsulta = new javax.swing.JComboBox<>();
        campoOutroObjetivoConsulta = new javax.swing.JTextField();
        botaoLimparInformacoesProfissionaisPaciente = new javax.swing.JButton();
        botaoPesquisarProfissao = new javax.swing.JButton();
        campoProfissao = new javax.swing.JTextField();
        panelInformacoesAgravo = new javax.swing.JPanel();
        labelTituloInformacoesAgravo = new javax.swing.JLabel();
        labelEmissaoCAT = new javax.swing.JLabel();
        campoEmissaoCAT = new javax.swing.JComboBox<>();
        labelBeneficiosPrevidenciarios = new javax.swing.JLabel();
        campoBeneficiosPrevidenciarios = new javax.swing.JComboBox<>();
        labelLaudoAposentadoriaDesdeQuando = new javax.swing.JLabel();
        campoLaudoAposentadoriaDesdeQuando = new javax.swing.JTextField();
        labelFisioterapiaAnteriormente = new javax.swing.JLabel();
        campoFisioterapiaAnteriormente = new javax.swing.JComboBox<>();
        botaoLimparInformacoesRelacionadasAgravo = new javax.swing.JButton();
        botaoLimparTudo = new javax.swing.JButton();
        botaoVoltar = new javax.swing.JButton();
        botaoSalvar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        panelInformacoesPaciente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelTituloInformacoesPaciente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelTituloInformacoesPaciente.setLabelFor(panelInformacoesPaciente);
        labelTituloInformacoesPaciente.setText("Informações sobre o Paciente:");

        labelSUS.setLabelFor(campoSUS);
        labelSUS.setText("Cartão SUS:");

        campoSUS.setToolTipText("Numero do Cartao SUS");
        campoSUS.setName("Cartão SUS");
        campoSUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoSUSActionPerformed(evt);
            }
        });
        campoSUS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campoSUSKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoSUSKeyTyped(evt);
            }
        });

        labelNomePaciente.setLabelFor(campoNomePaciente);
        labelNomePaciente.setText("Nome Completo:");

        campoNomePaciente.setToolTipText("Nome do Paciente");
        campoNomePaciente.setName("Nome completo"); // NOI18N
        campoNomePaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNomePacienteActionPerformed(evt);
            }
        });
        campoNomePaciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoNomePacienteKeyTyped(evt);
            }
        });

        labelSexo.setLabelFor(campoSexo);
        labelSexo.setText("Sexo:");

        campoSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Feminino", "Outro" }));
        campoSexo.setName("Sexo"); // NOI18N

        labelDataNascimento.setLabelFor(campoDataNascimento);
        labelDataNascimento.setText("Data de nascimento:");

        campoDataNascimento.setName("Data de nascimento"); // NOI18N
        campoDataNascimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoDataNascimentoActionPerformed(evt);
            }
        });
        campoDataNascimento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoDataNascimentoKeyTyped(evt);
            }
        });

        labelNaturalidade.setLabelFor(campoNaturalidade);
        labelNaturalidade.setText("Naturalidade:");

        campoNaturalidade.setName("Naturalidade"); // NOI18N

        labelNomeMae.setLabelFor(campoNomeMae);
        labelNomeMae.setText("Nome da mãe:");

        campoNomeMae.setName("Nome da mãe"); // NOI18N
        campoNomeMae.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoNomeMaeKeyTyped(evt);
            }
        });

        labelEndereco.setLabelFor(campoEndereco);
        labelEndereco.setText("Endereço:");

        campoEndereco.setName("Endereço"); // NOI18N

        labelCelular.setLabelFor(campoCelular);
        labelCelular.setText("Celular:");

        campoCelular.setName("Celular"); // NOI18N
        campoCelular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoCelularKeyTyped(evt);
            }
        });

        labelEscolaridade.setLabelFor(campoEscolaridade);
        labelEscolaridade.setText("Escolaridade:");

        campoEscolaridade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Não sabe ler/Escrever", "1o Grau incompleto", "Ensino médio incompleto", "Superior Incompleto", "Especialização/Residencia", "1o Grau Completo", "Ensino médio completo", "Superior completo", "Mestrado", "Doutorado" }));
        campoEscolaridade.setName("Escolaridade"); // NOI18N

        botaoLimparInformacoesPaciente.setText("Limpar");
        botaoLimparInformacoesPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparInformacoesPacienteActionPerformed(evt);
            }
        });

        labelCPF.setText("CPF:");

        campoCPF.setToolTipText("Digite o CPF");
        campoCPF.setName("CPF"); // NOI18N
        campoCPF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoCPFKeyTyped(evt);
            }
        });

        campoNumeroCasa.setName("Numero da casa"); // NOI18N

        jLabel1.setText("Número:");

        javax.swing.GroupLayout panelInformacoesPacienteLayout = new javax.swing.GroupLayout(panelInformacoesPaciente);
        panelInformacoesPaciente.setLayout(panelInformacoesPacienteLayout);
        panelInformacoesPacienteLayout.setHorizontalGroup(
            panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacoesPacienteLayout.createSequentialGroup()
                .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInformacoesPacienteLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botaoLimparInformacoesPaciente)
                            .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(campoNaturalidade)
                                .addComponent(labelNomePaciente)
                                .addComponent(campoNomePaciente)
                                .addGroup(panelInformacoesPacienteLayout.createSequentialGroup()
                                    .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelInformacoesPacienteLayout.createSequentialGroup()
                                            .addComponent(labelSexo)
                                            .addGap(76, 76, 76))
                                        .addComponent(campoSexo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelInformacoesPacienteLayout.createSequentialGroup()
                                            .addGap(24, 24, 24)
                                            .addComponent(labelDataNascimento))
                                        .addGroup(panelInformacoesPacienteLayout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addComponent(campoDataNascimento))))
                                .addComponent(labelNaturalidade)
                                .addComponent(labelNomeMae)
                                .addComponent(campoNomeMae)
                                .addGroup(panelInformacoesPacienteLayout.createSequentialGroup()
                                    .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(campoSUS, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelSUS))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelCPF)
                                        .addComponent(campoCPF)))
                                .addComponent(labelCelular)
                                .addComponent(campoCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelEscolaridade)
                                .addComponent(campoEscolaridade, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(panelInformacoesPacienteLayout.createSequentialGroup()
                                    .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(campoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelEndereco))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(campoNumeroCasa))))))
                    .addGroup(panelInformacoesPacienteLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(labelTituloInformacoesPaciente)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelInformacoesPacienteLayout.setVerticalGroup(
            panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInformacoesPacienteLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(labelTituloInformacoesPaciente)
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSUS)
                    .addComponent(labelCPF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoSUS, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelNomePaciente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSexo)
                    .addComponent(labelDataNascimento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelNaturalidade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoNaturalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelNomeMae)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoNomeMae, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEndereco)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacoesPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoNumeroCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelCelular)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelEscolaridade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoEscolaridade, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(botaoLimparInformacoesPaciente)
                .addGap(15, 15, 15))
        );

        campoSUS.getAccessibleContext().setAccessibleName("\"\"");

        panelOrigemEncaminhamento.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelOrigemEncaminhamento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelOrigemEncaminhamento.setLabelFor(panelOrigemEncaminhamento);
        labelOrigemEncaminhamento.setText("Origem do Encaminhamento:");

        checkINSS.setText("INSS");
        checkINSS.setName("Origem Encaminhamento"); // NOI18N
        checkINSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkINSSActionPerformed(evt);
            }
        });

        checkSUS.setText("SUS");
        checkSUS.setName("Origem Encaminhamento"); // NOI18N

        checkEmpresa.setText("Empresa");
        checkEmpresa.setName("Origem Encaminhamento"); // NOI18N

        checkSindicato.setText("Sindicato");
        checkSindicato.setName("Origem Encaminhamento"); // NOI18N

        checkMunicipio.setText("Município");
        checkMunicipio.setName("Origem Encaminhamento"); // NOI18N

        checkSem.setText("Sem");
        checkSem.setName("Origem Encaminhamento"); // NOI18N

        checkServMedicoPart.setText("Serv. Médico Part.");
        checkServMedicoPart.setName("Origem Encaminhamento"); // NOI18N
        checkServMedicoPart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkServMedicoPartActionPerformed(evt);
            }
        });

        checkUnidade.setText("Unidade");
        checkUnidade.setName("Origem Encaminhamento"); // NOI18N

        checkOutro.setText("Outro");
        checkOutro.setName("outro"); // NOI18N
        checkOutro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutroActionPerformed(evt);
            }
        });

        campoMunicipioUnidadeOUOutro.setToolTipText("Município, Unidade ou outro...");
        campoMunicipioUnidadeOUOutro.setEnabled(false);
        campoMunicipioUnidadeOUOutro.setName("campoMunicipioUnidadeOUOutro"); // NOI18N
        campoMunicipioUnidadeOUOutro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoMunicipioUnidadeOUOutroActionPerformed(evt);
            }
        });

        botaoLimparOrigemEncaminhamento.setText("Limpar");
        botaoLimparOrigemEncaminhamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparOrigemEncaminhamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOrigemEncaminhamentoLayout = new javax.swing.GroupLayout(panelOrigemEncaminhamento);
        panelOrigemEncaminhamento.setLayout(panelOrigemEncaminhamentoLayout);
        panelOrigemEncaminhamentoLayout.setHorizontalGroup(
            panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOrigemEncaminhamentoLayout.createSequentialGroup()
                .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelOrigemEncaminhamentoLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoLimparOrigemEncaminhamento))
                    .addGroup(panelOrigemEncaminhamentoLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelOrigemEncaminhamentoLayout.createSequentialGroup()
                                .addComponent(labelOrigemEncaminhamento)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOrigemEncaminhamentoLayout.createSequentialGroup()
                                .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(campoMunicipioUnidadeOUOutro, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelOrigemEncaminhamentoLayout.createSequentialGroup()
                                        .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkINSS)
                                            .addComponent(checkSindicato)
                                            .addComponent(checkServMedicoPart))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkMunicipio)
                                            .addComponent(checkUnidade)
                                            .addComponent(checkSUS))
                                        .addGap(18, 18, 18)
                                        .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkOutro)
                                            .addComponent(checkSem)
                                            .addComponent(checkEmpresa))))
                                .addGap(5, 5, 5)))))
                .addGap(15, 15, 15))
        );
        panelOrigemEncaminhamentoLayout.setVerticalGroup(
            panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOrigemEncaminhamentoLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(labelOrigemEncaminhamento)
                .addGap(18, 18, 18)
                .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOrigemEncaminhamentoLayout.createSequentialGroup()
                        .addComponent(checkINSS)
                        .addGap(18, 18, 18)
                        .addComponent(checkSindicato)
                        .addGap(26, 26, 26)
                        .addComponent(checkServMedicoPart))
                    .addGroup(panelOrigemEncaminhamentoLayout.createSequentialGroup()
                        .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkSUS)
                            .addComponent(checkEmpresa))
                        .addGap(26, 26, 26)
                        .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkMunicipio)
                            .addComponent(checkSem))
                        .addGap(18, 18, 18)
                        .addGroup(panelOrigemEncaminhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkUnidade)
                            .addComponent(checkOutro))))
                .addGap(18, 18, 18)
                .addComponent(campoMunicipioUnidadeOUOutro, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoLimparOrigemEncaminhamento)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        panelInformacoesProfissionaisPaciente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelTituloInformacoesProfissionaisPaciente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelTituloInformacoesProfissionaisPaciente.setLabelFor(panelInformacoesProfissionaisPaciente);
        labelTituloInformacoesProfissionaisPaciente.setText("Informações Profissionais do Paciente:");

        labelProfisssao.setLabelFor(campoProfissao);
        labelProfisssao.setText("Profissao:");

        labelCBO.setLabelFor(campoCBO);
        labelCBO.setText("CBO:");

        campoCBO.setEditable(false);
        campoCBO.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        campoCBO.setEnabled(false);
        campoCBO.setName("CBO"); // NOI18N
        campoCBO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoCBOActionPerformed(evt);
            }
        });

        labelEmpresa.setLabelFor(campoEmpresa);
        labelEmpresa.setText("Empresa:");

        campoEmpresa.setName("Empresa"); // NOI18N

        labelRelacaoTrabalho.setLabelFor(campoRelacaoTrabalho);
        labelRelacaoTrabalho.setText("Relação de Trabalho:");

        campoRelacaoTrabalho.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Assalariado", "Desempregado", "Aposentado", "Empregado", "Autônomo", "Mercado Informal" }));
        campoRelacaoTrabalho.setName("Relação de Trabalho"); // NOI18N
        campoRelacaoTrabalho.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoRelacaoTrabalhoItemStateChanged(evt);
            }
        });

        campoMercadoInformal.setEditable(false);
        campoMercadoInformal.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        campoMercadoInformal.setEnabled(false);
        campoMercadoInformal.setName("campoMercadoInformal"); // NOI18N

        labelSituacaoTrabalho.setLabelFor(campoSituacaoTrabalho);
        labelSituacaoTrabalho.setText("Situação de Trabalho:");

        campoSituacaoTrabalho.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ativo na mesma ocupação", "Empregado", "Afastado", "Autonomo", "Aposentado", "Mercado Informal" }));
        campoSituacaoTrabalho.setName("Situação de Trabalho"); // NOI18N

        labelCarteiraTrabalho.setLabelFor(campoCarteiraTrabalho);
        labelCarteiraTrabalho.setText("Carteira de Trabalho:");

        campoCarteiraTrabalho.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Assalariado com carteira", "Assalariado com dispensa de assinatura da carteira pelo RJU", "Não assalariado", "Assalariado sem carteira assinada", "Não se aplica" }));
        campoCarteiraTrabalho.setName("Carteira de Trabalho"); // NOI18N

        labelObjetivoConsulta.setText("Objetivo Da Consulta:");

        campoObjetivoConsulta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Esclarecimento diagnóstico", "Tratamento", "Outro" }));
        campoObjetivoConsulta.setName("Objetivo da Consulta"); // NOI18N
        campoObjetivoConsulta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoObjetivoConsultaItemStateChanged(evt);
            }
        });
        campoObjetivoConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoObjetivoConsultaActionPerformed(evt);
            }
        });

        campoOutroObjetivoConsulta.setEditable(false);
        campoOutroObjetivoConsulta.setEnabled(false);
        campoOutroObjetivoConsulta.setName("outroObjetivoConsulta"); // NOI18N
        campoOutroObjetivoConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoOutroObjetivoConsultaActionPerformed(evt);
            }
        });

        botaoLimparInformacoesProfissionaisPaciente.setText("Limpar");
        botaoLimparInformacoesProfissionaisPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparInformacoesProfissionaisPacienteActionPerformed(evt);
            }
        });

        botaoPesquisarProfissao.setText("Pesquisar Profissão");
        botaoPesquisarProfissao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarProfissaoActionPerformed(evt);
            }
        });

        campoProfissao.setEditable(false);
        campoProfissao.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        campoProfissao.setEnabled(false);
        campoProfissao.setName("Profissão"); // NOI18N
        campoProfissao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoProfissaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInformacoesProfissionaisPacienteLayout = new javax.swing.GroupLayout(panelInformacoesProfissionaisPaciente);
        panelInformacoesProfissionaisPaciente.setLayout(panelInformacoesProfissionaisPacienteLayout);
        panelInformacoesProfissionaisPacienteLayout.setHorizontalGroup(
            panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacoesProfissionaisPacienteLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInformacoesProfissionaisPacienteLayout.createSequentialGroup()
                        .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelCarteiraTrabalho)
                            .addComponent(labelSituacaoTrabalho)
                            .addGroup(panelInformacoesProfissionaisPacienteLayout.createSequentialGroup()
                                .addComponent(labelProfisssao)
                                .addGap(227, 227, 227)
                                .addComponent(labelCBO)))
                        .addContainerGap(194, Short.MAX_VALUE))
                    .addGroup(panelInformacoesProfissionaisPacienteLayout.createSequentialGroup()
                        .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botaoLimparInformacoesProfissionaisPaciente)
                            .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(panelInformacoesProfissionaisPacienteLayout.createSequentialGroup()
                                    .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelObjetivoConsulta)
                                        .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(campoObjetivoConsulta, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(campoCarteiraTrabalho, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(campoOutroObjetivoConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                                .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelRelacaoTrabalho)
                                    .addComponent(labelEmpresa)
                                    .addGroup(panelInformacoesProfissionaisPacienteLayout.createSequentialGroup()
                                        .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(campoRelacaoTrabalho, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(campoEmpresa, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(botaoPesquisarProfissao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelTituloInformacoesProfissionaisPaciente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                                            .addComponent(campoProfissao, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(campoCBO, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                            .addComponent(campoMercadoInformal)))
                                    .addComponent(campoSituacaoTrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 23, Short.MAX_VALUE))))
        );
        panelInformacoesProfissionaisPacienteLayout.setVerticalGroup(
            panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacoesProfissionaisPacienteLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(labelTituloInformacoesProfissionaisPaciente)
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelProfisssao)
                    .addComponent(labelCBO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoProfissao, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoCBO, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoPesquisarProfissao, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelEmpresa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelRelacaoTrabalho)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoRelacaoTrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoMercadoInformal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelSituacaoTrabalho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoSituacaoTrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelCarteiraTrabalho)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoCarteiraTrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelObjetivoConsulta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacoesProfissionaisPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoObjetivoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoOutroObjetivoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoLimparInformacoesProfissionaisPaciente)
                .addGap(16, 16, 16))
        );

        panelInformacoesAgravo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelTituloInformacoesAgravo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelTituloInformacoesAgravo.setText("Informações relacionadas ao agravo:");

        labelEmissaoCAT.setText("Emissão de CAT:");

        campoEmissaoCAT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Emitida", "Não emitida", "Não sabe", "Não se aplica" }));
        campoEmissaoCAT.setName("Emissão de CAT"); // NOI18N

        labelBeneficiosPrevidenciarios.setText("Beneficios Previdenciários:");

        campoBeneficiosPrevidenciarios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Não recebe aposentadoria", "Auxílio acidente", "Aposentadoria Previdenciária", "Aposentadoria tempo de serviço", "idade ou especial", "Não se aplica", "Não sabe informar" }));
        campoBeneficiosPrevidenciarios.setName("Beneficios Previdenciarios"); // NOI18N

        labelLaudoAposentadoriaDesdeQuando.setText("Laudo/Aposentadoria, desde quando?");

        campoLaudoAposentadoriaDesdeQuando.setName("Laudo/Aposentadoria desde quando"); // NOI18N

        labelFisioterapiaAnteriormente.setText("Realizou fisioterapia anteriormente?");

        campoFisioterapiaAnteriormente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sim", "Não" }));
        campoFisioterapiaAnteriormente.setSelectedIndex(1);
        campoFisioterapiaAnteriormente.setName("Realizou fisioterapia anteriormente"); // NOI18N

        botaoLimparInformacoesRelacionadasAgravo.setText("Limpar");
        botaoLimparInformacoesRelacionadasAgravo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparInformacoesRelacionadasAgravoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInformacoesAgravoLayout = new javax.swing.GroupLayout(panelInformacoesAgravo);
        panelInformacoesAgravo.setLayout(panelInformacoesAgravoLayout);
        panelInformacoesAgravoLayout.setHorizontalGroup(
            panelInformacoesAgravoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacoesAgravoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelInformacoesAgravoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botaoLimparInformacoesRelacionadasAgravo)
                    .addGroup(panelInformacoesAgravoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(labelFisioterapiaAnteriormente, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labelBeneficiosPrevidenciarios, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labelTituloInformacoesAgravo, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labelEmissaoCAT, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(campoEmissaoCAT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(campoBeneficiosPrevidenciarios, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelLaudoAposentadoriaDesdeQuando, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(campoLaudoAposentadoriaDesdeQuando, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(campoFisioterapiaAnteriormente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        panelInformacoesAgravoLayout.setVerticalGroup(
            panelInformacoesAgravoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacoesAgravoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(labelTituloInformacoesAgravo)
                .addGap(18, 18, 18)
                .addComponent(labelEmissaoCAT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoEmissaoCAT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelBeneficiosPrevidenciarios)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoBeneficiosPrevidenciarios, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelLaudoAposentadoriaDesdeQuando)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoLaudoAposentadoriaDesdeQuando, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelFisioterapiaAnteriormente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoFisioterapiaAnteriormente, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoLimparInformacoesRelacionadasAgravo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        botaoLimparTudo.setText("Limpar Tudo");
        botaoLimparTudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparTudoActionPerformed(evt);
            }
        });

        botaoVoltar.setText("Voltar");
        botaoVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVoltarActionPerformed(evt);
            }
        });

        botaoSalvar.setText("Salvar");
        botaoSalvar.setToolTipText("Salvar e Realizar Avaliação de Enfermagem");
        botaoSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        botaoSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelOrigemEncaminhamento, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelInformacoesPaciente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelInformacoesProfissionaisPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelInformacoesAgravo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botaoLimparTudo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botaoVoltar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botaoSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelInformacoesProfissionaisPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelInformacoesAgravo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botaoLimparTudo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botaoSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botaoVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelInformacoesPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelOrigemEncaminhamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campoSUSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoSUSActionPerformed

    }//GEN-LAST:event_campoSUSActionPerformed

    private void campoMunicipioUnidadeOUOutroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoMunicipioUnidadeOUOutroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoMunicipioUnidadeOUOutroActionPerformed

    private void checkINSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkINSSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkINSSActionPerformed

    private void checkServMedicoPartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkServMedicoPartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkServMedicoPartActionPerformed

    /**
     *
     * Se o checkbox com valor outro tá selecionado, deixa o textfield visivel
     *
     * @param evt
     */
    private void checkOutroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutroActionPerformed
        try {
            if (this.checkOutro.isSelected()) {
                this.campoMunicipioUnidadeOUOutro.setEnabled(true);
            } else {
                this.campoMunicipioUnidadeOUOutro.setEnabled(false);
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, erro.getMessage());
        }
    }//GEN-LAST:event_checkOutroActionPerformed

    private void campoCBOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoCBOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoCBOActionPerformed

    /**
     *
     * Limpa o texto do panel de informacoes do paciente
     *
     * @param evt
     */
    private void botaoLimparInformacoesPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparInformacoesPacienteActionPerformed
        try {
            limpaTextFields(this.panelInformacoesPaciente);
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, erro.getMessage());
        }
    }//GEN-LAST:event_botaoLimparInformacoesPacienteActionPerformed

    private void campoOutroObjetivoConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoOutroObjetivoConsultaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoOutroObjetivoConsultaActionPerformed

    /**
     *
     * Voltar para a tela principal apenas escondendo a tela do acolhimento
     *
     * @param evt
     */
    private void botaoVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVoltarActionPerformed
        try {
            this.setLocationRelativeTo(null);
            this.setVisible(false);
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
        }

    }//GEN-LAST:event_botaoVoltarActionPerformed

    /**
     * Metodo para salvar todas infos dos panels em uma lista
     *
     * @param panel
     * @return
     */
    public HashMap<String, String> getInfoPorPanel(ArrayList<JPanel> listaDePanel) {

        /**
         * Hashmap contendo tudo que foi passado no form
         */
        HashMap<String, String> hmlistaInformacoesPanel = new HashMap<String, String>();
        /**
         * Strings pra armazenar estes dados que são digitados em outros
         * textfields (Campos que tem a opção 'outro')
         *
         */
        String origemEncaminhamento = "";

        try {

            /**
             * Para cada panel presente no formulário
             */
            for (JPanel panel : listaDePanel) {

                /**
                 * Percorre todos componentes dele
                 */
                for (Component c : panel.getComponents()) {
                    if (c.getClass().toString().contains("javax.swing.JFormattedTextField")) {
                        JFormattedTextField temp = (JFormattedTextField) c;
                        if (temp.getText().equals("") || temp.getText().equals(" ") || temp.getText().equals("  /  /    ") || temp.getText().equals("  /  /  ")) {
                            throw new CampoEmBrancoException("Por favor, digite uma data de nascimento!");
                        } else {
                            hmlistaInformacoesPanel.put(temp.getName(), temp.getText());
                        }
                    }

                    /**
                     * Quando o componente do panel for um textfield
                     */
                    if (c.getClass().toString().contains("javax.swing.JTextField")) {
                        JTextField temp = (JTextField) c;

                        /**
                         * Se existir algum campo vazio, lança a exceção de
                         * campo em branco
                         */
                        if (temp.getText().equals("") || temp.getText().equals(" ")) {

                            /**
                             * Se o campo profissao estiver vazio, lanca excecao
                             */
                            if (temp.getName().equals("Profissão")) {
                                throw new CampoEmBrancoException("Por favor, selecione uma profissão!");
                            }

                            /**
                             * Se o campo estiver enabled e estiver vazio, lança
                             * exceção de campo em branco
                             */
                            if (temp.isEnabled() == true) {
                                throw new CampoEmBrancoException("Campo em branco no: " + temp.getName());
                            }

                        } else if (temp.getName().equals("campoMunicipioUnidadeOUOutro")) {
                            if (temp.isEnabled()) {
                                origemEncaminhamento = temp.getText();
                            }
                        } else {

                            /**
                             * Se o campo não estiver vazio, adiciona na lista
                             * SE O CAMPO NÃO FOR O 'OUTRO ORIGEM DE
                             * ENCAMINHAMENTO'
                             */
                            hmlistaInformacoesPanel.put(temp.getName(), temp.getText());
                        }
                    } /**
                     * Quando o componente do panel for um combobox
                     */
                    else if (c.getClass().toString().contains("javax.swing.JComboBox")) {
                        JComboBox temp = (JComboBox) c;
                        switch (temp.getName()) {
                            case "Relação de Trabalho":
                                if (temp.getSelectedItem().equals("Mercado Informal")) {
                                    for (Component d : panel.getComponents()) {
                                        if (d.getClass().toString().contains("javax.swing.JTextField")) {
                                            JTextField relacaoTrabalhoMercInf = (JTextField) d;
                                            if (relacaoTrabalhoMercInf.getName().equals("campoMercadoInformal")) {
                                                hmlistaInformacoesPanel.put("Relação de Trabalho", relacaoTrabalhoMercInf.getText());
                                            }
                                        }
                                    }
                                }
                                break;
                            case "Objetivo da Consulta":
                                if (temp.getSelectedItem().equals("Outro")) {
                                    for (Component d : panel.getComponents()) {
                                        if (d.getClass().toString().contains("javax.swing.JTextField")) {
                                            JTextField outroObjConsulta = (JTextField) d;
                                            if (outroObjConsulta.getName().equals("campoMercadoInformal")) {
                                                hmlistaInformacoesPanel.put("Relação de Trabalho", outroObjConsulta.getText());
                                            }
                                        }
                                    }
                                }
                                break;
                            default:
                                hmlistaInformacoesPanel.put(temp.getName(), temp.getSelectedItem().toString());
                                break;
                        }
                    } /**
                     * Quando o componente do panel for um checkbox
                     */
                    else if (c.getClass().toString().contains("javax.swing.JCheckBox")) {
                        JCheckBox temp = (JCheckBox) c;

                        /**
                         * Se o checkbox estiver selecionado, armazena o texto
                         * dele, se não, não
                         */
                        if (temp.isSelected()) {

                            /**
                             * Percorro todos componentes até achar o JTextField
                             * outro NAO É NADA EFICIENTE SE ADICIONAR MUITOS
                             * COMPONENTES DPS NESTE PANEL, MAS POR ENQUANTO FOI
                             * A MELHOR SOLUÇÃO QUE ACHEI
                             */
                            if (temp.getName().equals("outro")) {
                                for (Component d : panel.getComponents()) {
                                    if (d.getClass().toString().contains("javax.swing.JTextField")) {
                                        JTextField campoOutroOrigemEncaminhamento = (JTextField) d;
                                        hmlistaInformacoesPanel.put("Origem Encaminhamento", campoOutroOrigemEncaminhamento.getText());
                                    }
                                }
                            } else {
                                hmlistaInformacoesPanel.put(temp.getName(), temp.getText());
                            }

                        }
                    }

                }

            }
        } catch (Exception erro) {
            /**
             * Verifico se o erro é apenas um campo em branco, pra evitar de
             * escrever no log quando isso acontecer
             */
            if (erro instanceof CampoEmBrancoException) {
                JOptionPane.showMessageDialog(null, erro.getMessage());
            } else {
                log.EscreveNoLog("Erro de campo em branco: "+erro.getMessage());
            }
        }
        return hmlistaInformacoesPanel;
    }

    /**
     * Ao clickar no botao salvar, pega todos panels, e procura texto em todos
     * textfields, combobox, checkbox e etc e envia pra controller tratar
     *
     * @param evt
     */
    private void botaoSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSalvarActionPerformed
        try {
            HashMap<String, String> mapPaciente = getInfoPorPanel(listaDePanel);
            if (ac.salvar(mapPaciente)) {
                JOptionPane.showMessageDialog(null, "Paciente inserido com sucesso");
                this.setVisible(false);
            } else {
                throw new Exception("Não foi possível salvar o paciente, por favor, tente novamente!");
            }
        } catch (Exception erro) {
            log.EscreveNoLog("Erro no salvar da view: "+erro.getMessage());
            JOptionPane.showMessageDialog(null, "Erro: " + erro.getMessage());
        }
    }//GEN-LAST:event_botaoSalvarActionPerformed

    /**
     * Se selecionar o item mercado informal no combobox, o textfield para
     * especificar fica visivel
     *
     * @param evt
     */
    private void campoRelacaoTrabalhoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoRelacaoTrabalhoItemStateChanged
        try {
            if (campoRelacaoTrabalho.getSelectedItem().toString().equals("Mercado Informal")) {
                this.campoMercadoInformal.setEditable(true);
                this.campoMercadoInformal.setEnabled(true);

            } else {
                this.campoMercadoInformal.setEditable(false);
                this.campoMercadoInformal.setEnabled(false);
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, erro.getMessage());
        }

    }//GEN-LAST:event_campoRelacaoTrabalhoItemStateChanged

    /**
     *
     * Se selecionar que o objetivo da consulta for outro, deixa enabled o
     * textfield para especificar o outro
     *
     * @param evt
     */
    private void campoObjetivoConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoObjetivoConsultaActionPerformed
        try {
            if (this.campoObjetivoConsulta.getSelectedItem().toString().equals("Outro")) {
                this.campoOutroObjetivoConsulta.setEnabled(true);
            } else {
                this.campoOutroObjetivoConsulta.setEnabled(false);
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, erro.getMessage());
        }
    }//GEN-LAST:event_campoObjetivoConsultaActionPerformed

    /**
     * Tira a seleção de todos checkbox de um panel
     *
     * @param panel
     */
    private void limpaCheckBox(JPanel panel) {
        try {
            for (Component c : panel.getComponents()) {
                if (c.getClass().toString().contains("javax.swing.JCheckBox")) {
                    JCheckBox temp = (JCheckBox) c;
                    temp.setSelected(false);
                }
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(null, erro.getMessage());
        }
    }

    /**
     * limpa o texto de um panel em especifico
     *
     * @param panel
     */
    private void limpaTextFields(JPanel panel) {
        try {
            for (Component c : panel.getComponents()) {
                if (c.getClass().toString().contains("javax.swing.JTextField")) {
                    JTextField temp = (JTextField) c;
                    temp.setText("");
                }
                if (c.getClass().toString().contains("javax.swing.JFormattedTextField")) {
                    JFormattedTextField temp = (JFormattedTextField) c;
                    temp.setText("");
                }
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(null, erro.getMessage());
        }
    }

    /**
     *
     * Limpa o texto do panel de informacoes do paciente
     *
     * @param evt
     */
    private void botaoLimparTudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparTudoActionPerformed
        try {
            for (JPanel panel : listaDePanel) {
                limpaTextFields(panel);
                limpaCheckBox(panel);
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, erro.getMessage());
        }
    }//GEN-LAST:event_botaoLimparTudoActionPerformed

    /**
     *
     * Limpa o texto do panel de informacoes profissionais do paciente
     *
     * @param evt
     */
    private void botaoLimparInformacoesProfissionaisPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparInformacoesProfissionaisPacienteActionPerformed
        try {
            limpaTextFields(this.panelInformacoesProfissionaisPaciente);
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, erro.getMessage());
        }
    }//GEN-LAST:event_botaoLimparInformacoesProfissionaisPacienteActionPerformed

    /**
     *
     * Limpa o texto do panel de informacoes relacionadas ao agravo
     *
     * @param evt
     */
    private void botaoLimparInformacoesRelacionadasAgravoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparInformacoesRelacionadasAgravoActionPerformed
        try {
            limpaTextFields(this.panelInformacoesAgravo);
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, erro.getMessage());
        }
    }//GEN-LAST:event_botaoLimparInformacoesRelacionadasAgravoActionPerformed

    /**
     *
     * Limpa o texto do panel de origem do encaminhamento
     *
     * @param evt
     *
     */
    private void botaoLimparOrigemEncaminhamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparOrigemEncaminhamentoActionPerformed
        try {
            limpaCheckBox(this.panelOrigemEncaminhamento);
            this.campoMunicipioUnidadeOUOutro.setEnabled(false);
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, erro.getMessage());
        }
    }//GEN-LAST:event_botaoLimparOrigemEncaminhamentoActionPerformed

    /**
     * Ao clickar no botao de pesquisa, abre o JDialog pesquisa ocupacao Ao
     * fechar o JDialog, seta os textfields deste form com os valores do outro
     *
     * @param evt
     */
    private void botaoPesquisarProfissaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarProfissaoActionPerformed
        try {
            PesquisaOcupacao po = new PesquisaOcupacao(null, rootPaneCheckingEnabled);
            po.setLocationRelativeTo(null);
            po.setVisible(true);
            if (!po.isVisible()) {
                this.campoProfissao.setText(po.getNomeProfissao());
                this.campoCBO.setText(po.getCbo());
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
        }
    }//GEN-LAST:event_botaoPesquisarProfissaoActionPerformed

    private void campoProfissaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoProfissaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoProfissaoActionPerformed

    /**
     * Se selecionar o item Outro no combobox, o textfield para especificar fica
     * visivel
     *
     * @param evt
     */
    private void campoObjetivoConsultaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoObjetivoConsultaItemStateChanged
        try {
            if (campoObjetivoConsulta.getSelectedItem().toString().equals("Outro")) {
                this.campoOutroObjetivoConsulta.setEditable(true);
                this.campoOutroObjetivoConsulta.setEnabled(true);

            } else {
                this.campoOutroObjetivoConsulta.setEditable(false);
                this.campoOutroObjetivoConsulta.setEnabled(false);
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, erro.getMessage());
        }

    }//GEN-LAST:event_campoObjetivoConsultaItemStateChanged

    /**
     * Metodo para verificar se um char é número
     *
     * @param charDaView
     * @return
     */
    public boolean verificaSeEhNumero(char charDaView) {
        try {
            if (Character.isDigit(charDaView) == true) {
                return true;
            } else {
                return false;
            }
        } catch (Exception erro) {
            return false;
        }
    }

    /**
     * Se o tamanho da string for maior que um determinado tamanho, retorna
     * false, se nao, retorna true.
     *
     * @param text
     * @param tamanhoMaxPermitido
     * @return
     */
    public boolean tamanhoStringInTextFieldEhMenorOuIgualTamanhoPermitido(String text, int tamanhoMaxPermitido) {
        if (text.length() > tamanhoMaxPermitido) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * Quando é digitado algo, verifica se o tamanho do textfield não é maior
     * que 15, pois o cartao sus sempre tem apenas 15 digitos. E Verifica se o
     * caracter digitado é um numero, se nao, nao coloca no textfield.
     *
     * @param evt
     */
    private void campoSUSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoSUSKeyTyped
        try {
            if (tamanhoStringInTextFieldEhMenorOuIgualTamanhoPermitido(campoSUS.getText(), 14) == false) {
                evt.consume();
                JOptionPane.showMessageDialog(this, "O comprimento do cartão SUS não pode ser maior que 15 dígitos! :(", "Erro", 2);
                campoCPF.requestFocus();
            } else if (!Character.isDigit(evt.getKeyChar())) {
                /**
                 * Se o caracter não é um numero, mas é uma letra, ele dá
                 * consume e mostra a mensagem que nao pode haver caracteres se
                 * nao for uma letra ele não mostra nenhum tipo de mensagem. Fiz
                 * isso para evitar que fique aparecendo a mensagem quando o
                 * usuário aperta Esc ou Back_Space ou DEL.
                 */
                if (!Character.isLetter(evt.getKeyChar()) && !temCharEspecial(evt.getKeyChar())) {

                } else {
                    evt.consume();
                    JOptionPane.showMessageDialog(this, "Não pode haver caracteres não numéricos no cartão SUS! :(", "Erro", 2);
                }
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, "Erro inesperado: " + erro.getMessage());
        }
    }//GEN-LAST:event_campoSUSKeyTyped

    private void campoSUSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoSUSKeyPressed

    }//GEN-LAST:event_campoSUSKeyPressed

    /**
     * Quando é digitado algo, verifica se o tamanho do textfield não é maior
     * que 15, pois o celular tem apenas 11 digitos. E Verifica se o caracter
     * digitado é um numero, se nao, nao coloca no textfield.
     *
     * @param evt
     */
    private void campoCelularKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoCelularKeyTyped
        try {
            if (tamanhoStringInTextFieldEhMenorOuIgualTamanhoPermitido(campoCelular.getText(), 10) == false) {
                evt.consume();
                JOptionPane.showMessageDialog(this, "O comprimento do celular não pode ser maior que 11 dígitos! :(", "Erro", 2);
            } else if (!Character.isDigit(evt.getKeyChar())) {
                /**
                 * Se o caracter não é um numero, mas é uma letra, ele dá
                 * consume e mostra a mensagem que nao pode haver caracteres se
                 * nao for uma letra ele não mostra nenhum tipo de mensagem. Fiz
                 * isso para evitar que fique aparecendo a mensagem quando o
                 * usuário aperta Esc ou Back_Space ou DEL.
                 */
                if (!Character.isLetter(evt.getKeyChar()) && !temCharEspecial(evt.getKeyChar())) {

                } else {
                    evt.consume();
                    JOptionPane.showMessageDialog(this, "Não pode haver caracteres não numéricos no cartão SUS! :(", "Erro", 2);
                }
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, "Erro inesperado: " + erro.getMessage());
        }
    }//GEN-LAST:event_campoCelularKeyTyped
    /**
     * Verifica se o caracter digitado é um digito, se for, não o adiciona no
     * textfield e abre uma mensagem informando o erro
     *
     * @param evt
     */
    private void campoNomeMaeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoNomeMaeKeyTyped
        try {
            if (Character.isDigit(evt.getKeyChar())) {
                evt.consume();
                JOptionPane.showMessageDialog(this, "Não pode haver números no nome de uma pessoa! :(", "Erro", 2);
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, "Erro inesperado: " + erro.getMessage());
        }
    }//GEN-LAST:event_campoNomeMaeKeyTyped

    private void campoNomePacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNomePacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNomePacienteActionPerformed

    /**
     * Verifica se o caracter digitado é um digito, se for, não o adiciona no
     * textfield e abre uma mensagem informando o erro
     *
     * @param evt
     */
    private void campoNomePacienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoNomePacienteKeyTyped
        try {
            if (Character.isDigit(evt.getKeyChar())) {
                evt.consume();
                JOptionPane.showMessageDialog(this, "Não pode haver números no nome de uma pessoa! :(", "Erro", 2);
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, "Erro inesperado: " + erro.getMessage());
        }
    }//GEN-LAST:event_campoNomePacienteKeyTyped

    private void campoDataNascimentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoDataNascimentoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_campoDataNascimentoKeyTyped

    private void campoDataNascimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoDataNascimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoDataNascimentoActionPerformed
    /**
     * Metodo para verificar se um char é especial
     *
     * @param chr
     * @return true se sim, false se não
     */
    public boolean temCharEspecial(Character chr) {
        Pattern p = Pattern.compile("[!@#$%&*()_+=|<>?{}\\\\[\\\\]~-]", Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(String.valueOf(chr));
        if (String.valueOf(chr) == null || String.valueOf(chr).isEmpty()) {
            return false;
        }
        boolean b = m.find();
        if (b) {
            return true;
        } else {
            return false;
        }
    }
    private void campoCPFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoCPFKeyTyped
        try {
            if (tamanhoStringInTextFieldEhMenorOuIgualTamanhoPermitido(campoCPF.getText(), 10) == false) {
                evt.consume();
                JOptionPane.showMessageDialog(this, "O comprimento do cpf não pode ser maior que 11 dígitos! :(", "Erro", 2);
                campoNomePaciente.requestFocus();
            } else if (!Character.isDigit(evt.getKeyChar())) {
                /**
                 * Se o caracter não é um numero, mas é uma letra, ele dá
                 * consume e mostra a mensagem que nao pode haver caracteres se
                 * nao for uma letra ele não mostra nenhum tipo de mensagem. Fiz
                 * isso para evitar que fique aparecendo a mensagem quando o
                 * usuário aperta Esc ou Back_Space ou DEL.
                 */

                if (!Character.isLetter(evt.getKeyChar()) && !temCharEspecial(evt.getKeyChar())) {

                } else {
                    evt.consume();
                    JOptionPane.showMessageDialog(this, "Não pode haver caracteres não numéricos no cartão SUS! :(", "Erro", 2);
                }
            }
        } catch (Exception erro) {
            log.EscreveNoLog(erro.getMessage());
            JOptionPane.showMessageDialog(this, "Erro inesperado: " + erro.getMessage());
        }
    }//GEN-LAST:event_campoCPFKeyTyped

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoLimparInformacoesPaciente;
    private javax.swing.JButton botaoLimparInformacoesProfissionaisPaciente;
    private javax.swing.JButton botaoLimparInformacoesRelacionadasAgravo;
    private javax.swing.JButton botaoLimparOrigemEncaminhamento;
    private javax.swing.JButton botaoLimparTudo;
    private javax.swing.JButton botaoPesquisarProfissao;
    private javax.swing.JButton botaoSalvar;
    private javax.swing.JButton botaoVoltar;
    private javax.swing.JComboBox<String> campoBeneficiosPrevidenciarios;
    private javax.swing.JTextField campoCBO;
    private javax.swing.JTextField campoCPF;
    private javax.swing.JComboBox<String> campoCarteiraTrabalho;
    private javax.swing.JTextField campoCelular;
    private javax.swing.JTextField campoDataNascimento;
    private javax.swing.JComboBox<String> campoEmissaoCAT;
    private javax.swing.JTextField campoEmpresa;
    private javax.swing.JTextField campoEndereco;
    private javax.swing.JComboBox<String> campoEscolaridade;
    private javax.swing.JComboBox<String> campoFisioterapiaAnteriormente;
    private javax.swing.JTextField campoLaudoAposentadoriaDesdeQuando;
    private javax.swing.JTextField campoMercadoInformal;
    private javax.swing.JTextField campoMunicipioUnidadeOUOutro;
    private javax.swing.JTextField campoNaturalidade;
    private javax.swing.JTextField campoNomeMae;
    private javax.swing.JTextField campoNomePaciente;
    private javax.swing.JTextField campoNumeroCasa;
    private javax.swing.JComboBox<String> campoObjetivoConsulta;
    private javax.swing.JTextField campoOutroObjetivoConsulta;
    private javax.swing.JTextField campoProfissao;
    private javax.swing.JComboBox<String> campoRelacaoTrabalho;
    private javax.swing.JTextField campoSUS;
    private javax.swing.JComboBox<String> campoSexo;
    private javax.swing.JComboBox<String> campoSituacaoTrabalho;
    private javax.swing.JCheckBox checkEmpresa;
    private javax.swing.JCheckBox checkINSS;
    private javax.swing.JCheckBox checkMunicipio;
    private javax.swing.JCheckBox checkOutro;
    private javax.swing.JCheckBox checkSUS;
    private javax.swing.JCheckBox checkSem;
    private javax.swing.JCheckBox checkServMedicoPart;
    private javax.swing.JCheckBox checkSindicato;
    private javax.swing.JCheckBox checkUnidade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelBeneficiosPrevidenciarios;
    private javax.swing.JLabel labelCBO;
    private javax.swing.JLabel labelCPF;
    private javax.swing.JLabel labelCarteiraTrabalho;
    private javax.swing.JLabel labelCelular;
    private javax.swing.JLabel labelDataNascimento;
    private javax.swing.JLabel labelEmissaoCAT;
    private javax.swing.JLabel labelEmpresa;
    private javax.swing.JLabel labelEndereco;
    private javax.swing.JLabel labelEscolaridade;
    private javax.swing.JLabel labelFisioterapiaAnteriormente;
    private javax.swing.JLabel labelLaudoAposentadoriaDesdeQuando;
    private javax.swing.JLabel labelNaturalidade;
    private javax.swing.JLabel labelNomeMae;
    private javax.swing.JLabel labelNomePaciente;
    private javax.swing.JLabel labelObjetivoConsulta;
    private javax.swing.JLabel labelOrigemEncaminhamento;
    private javax.swing.JLabel labelProfisssao;
    private javax.swing.JLabel labelRelacaoTrabalho;
    private javax.swing.JLabel labelSUS;
    private javax.swing.JLabel labelSexo;
    private javax.swing.JLabel labelSituacaoTrabalho;
    private javax.swing.JLabel labelTituloInformacoesAgravo;
    private javax.swing.JLabel labelTituloInformacoesPaciente;
    private javax.swing.JLabel labelTituloInformacoesProfissionaisPaciente;
    private javax.swing.JPanel panelInformacoesAgravo;
    private javax.swing.JPanel panelInformacoesPaciente;
    private javax.swing.JPanel panelInformacoesProfissionaisPaciente;
    private javax.swing.JPanel panelOrigemEncaminhamento;
    // End of variables declaration//GEN-END:variables

}
